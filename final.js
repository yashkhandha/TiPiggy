var firebase = require("firebase");
var Gpio = require('onoff').Gpio;
var touchGood = new Gpio(27, 'in', 'both');//good
var touchMedium = new Gpio(17, 'in', 'both');//medium
var touchBad = new Gpio(22, 'in', 'both');//bad
var motion1 = new Gpio(19, 'in', 'both');//1 dollar
var motion2 = new Gpio(26, 'in', 'both');// 2 dollars



const readline = require("readline");
//firebase configuration for nodejs;
var config = {
    apiKey: "AIzaSyDktRvied_K8Gm93x82WpGh-GJ5NzWahgo",
    authDomain: "assignment3b-ada53.firebaseapp.com",
    databaseURL: "https://assignment3b-ada53.firebaseio.com",
    projectId: "assignment3b-ada53",
    storageBucket: "assignment3b-ada53.appspot.com",
    messagingSenderId: "672948480231"
};
firebase.initializeApp(config);


var email = "";//global variable for the user's email address to distinguish which user is using this raspberry pi
var password = "";
var database = firebase.database();
var firebaseDatabase;
var databaseRef;
var currentUid;//current user id generated by firebase itself, it is a unique id for each user
var restaurantName = "";


//declare the input output about the readline library;
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});
monthlyClean();
login();


//use text UI to ask user login this IoT stuff to keep connecting with online database;
function login() {
    rl.question('Email Address:  ', (emailaddress) => {
        // console.log(`emailaddress is: ${emailaddress}`);
        email = emailaddress;

        rl.question('Password: ', (passwordline) => {
            // console.log(`password is: ${passwordline}`);
            password = passwordline;

            //after user enter the password should the raspberry pi connect to firebase;
            if (password != "") {
                chooseRestaurant();
            }
        });

    });
}


function updateToFirebase() {
    firebaseDatabase = firebase.database();
    //databaseRef = firebaseDatabase.ref("raspio");
    if (firebase.auth().currentUser !== null) {
        console.log("uid is : " + firebase.auth().currentUser.uid);
        currentUid = firebase.auth().currentUser.uid;
        console.log('Weboost-JL: currentUid', currentUid);
        var date = getDate();
        var currentTips = 10;
        var todayTips = currentTips;
        firebaseDatabase.ref("raspio/" + currentUid + "/Restaurant1").child(date).set({
            "Good": 10,
            "Medium": 8,
            "Bad": 2,
            "Tips": todayTips + 10.25,
        });
    }
}

function updateTotalTips() {
    var restaurantName;
    firebaseDatabase = firebase.database();
    //databaseRef = firebaseDatabase.ref("raspio");
    if (firebase.auth().currentUser !== null) {
        currentUid = firebase.auth().currentUser.uid;
        console.log('Weboost-JL: currentUid', currentUid);
        var date = getDate();
        var currentTips = 10;
        var todayTips = currentTips;
    }
    firebaseDatabase.ref("raspio").child(currentUid).once("value").then(function (snapshot) {
        var total = (snapshot.val()) || 'Anonymous';
        restaurantName = Object.keys(total)[Object.keys(total).length - 2];
        var numberOfRestaurant = Object.keys(total).length;
        console.log('Weboost-JL: updateTotalTips -> numberOfRestaurant', numberOfRestaurant);
        console.log('Weboost-JL: currentNode', restaurantName);
        console.log('Weboost-JL: currentNode', Object.keys(total)[Object.keys(total).length - 1]);
        if (restaurantName) {
            firebaseDatabase.ref("raspio/compare/" + restaurantName).set({
                "Tips": 10.25,
            });
        }

    });

}

//get currentUid and current restaurant name (global value: restaurantName) that the user choose.
function chooseRestaurant() {
    var restaurantNameListString = "";
    //get a reference to database service;
    //initialize the connection between firebase and local host
    //here is the default account we are using for this project
    firebase.auth().signInWithEmailAndPassword(email, password)
        .catch(function (error) {
            console.log("FIREBASE AUTH ERROR:");
            console.log(error.code);
            console.log(error.message);
            //if there are some error conencting to firebase, the user can login in again;
            login();
        }).then(function () {
            console.log("Firebase Connected");
            firebaseDatabase = firebase.database();
            //databaseRef = firebaseDatabase.ref("raspio");
            if (firebase.auth().currentUser !== null) {
                currentUid = firebase.auth().currentUser.uid;
                var date = getDate();
                firebaseDatabase.ref("raspio").child(currentUid).once("value").then(function (snapshot) {
                    var total = (snapshot.val()) || 'Anonymous';
                    var restaurantNames = Object.keys(total);
                    var numberOfRestaurant = Object.keys(total).length;
                    //console.log('Weboost-JL: updateTotalTips -> numberOfRestaurant', numberOfRestaurant);
                    //console.log('Weboost-JL: currentNode', restaurantName);
                    //console.log('Weboost-JL: currentNode', Object.keys(total)[Object.keys(total).length-1]);
                    for (var indexNumber = 0; indexNumber < numberOfRestaurant; indexNumber++) {
                        restaurantNameListString += (indexNumber + 1) + "." + Object.keys(total)[indexNumber] + " ";
                    }
                    //console.log('Weboost-JL: chooseRestaurant -> restaurantNameListString', restaurantNameListString);

                    rl.question('Please Choose Your Resanrant: ' + restaurantNameListString, (choosenRestaurant) => {
                        console.log(`Your choosen restaurant is: ${choosenRestaurant}`);
                        var indexTemp = parseInt(choosenRestaurant) - 1;
                        //console.log('Weboost-JL: chooseRestaurant -> indexTemp', indexTemp);
                        restaurantName = restaurantNames[indexTemp];
                        //if the input is invalid, ask the user to enter again unitl it is correct;
                        if (restaurantName) {
                            var status = checkAndCreateNew();//create the init node for today if it is nothing under today's node;
                            //after user enter the password should the raspberry pi connect to firebase;
                            if (restaurantName != "" && status == 1) {
                                console.log("Your are login as restaurant: ", restaurantName);
                                console.log("Waiting for Tips coming in ...");
                                updateTipsAndFeedbacks();
                            }
                        }else{
                            console.log("Invalid choice please choose again!");
                            chooseRestaurant();
                        }

                    });

                });
            }
        });
}

//if it is the first time the user login, it will generate today's node for the restaurant that the user choose;
function checkAndCreateNew() {
    var today = getDate();
    firebaseDatabase.ref("raspio").child(currentUid).child(restaurantName).child(today).once("value").then(function (snapshot) {
        var resultTemp = (snapshot.val()) || 'Anonymous';
        //console.log("checkAndCreateNew-> : ", resultTemp);
        if (resultTemp == "Anonymous") {
            firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName).child(today).set({
                "Good": 0,
                "Medium": 0,
                "Bad": 0,
                "Tips": 0,
            });
        }

    });
    return 1;
}

//base on the feedback from the raspberry pi update the certain value on firebae realtime database;
function updateTipsAndFeedbacks() {
    var totalTips = 0;
    var today = getDate();
    //catch the touch motion when the good button is clicked;
    touchGood.watch(function (err, value) {
        firebaseDatabase.ref("raspio").child(currentUid).child(restaurantName).child(today).once("value").then(function (snapshot) {
            var total = (snapshot.val());
            //console.log('Weboost-JL: updateTipsAndFeedbacks -> total', total);
            if (total != undefined) {
                var good = total.Good;
                var medium = total.Medium;
                var bad = total.Bad;
                var tips = total.Tips;
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Good": good + 1,
                });
            } else {
                var good = 0;
                var medium = 0;
                var bad = 0;
                var tips = 0;
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Good": good + 1,
                });
            }
        });
        console.log('GoodIntruder detected' + value);
    });
    //catch the touch motion when the medium button is clicked;
    touchMedium.watch(function (err, value) {
        firebaseDatabase.ref("raspio").child(currentUid).child(restaurantName).child(today).once("value").then(function (snapshot) {
            var total = (snapshot.val());
            //console.log('Weboost-JL: updateTipsAndFeedbacks -> total', total);
            if (total != undefined) {
                var good = total.Good;
                var medium = total.Medium;
                var bad = total.Bad;
                var tips = total.Tips;
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Medium": medium + 1,
                });
            } else {
                var good = 0;
                var medium = 0;
                var bad = 0;
                var tips = 0;
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Medium": medium + 1,
                });
            }
        });
        console.log('MediumIntruder detected' + value);
    });
    //catch the touch motion when the bad button is clicked;
    touchBad.watch(function (err, value) {
        firebaseDatabase.ref("raspio").child(currentUid).child(restaurantName).child(today).once("value").then(function (snapshot) {
            var total = (snapshot.val());
            if (total != undefined) {
                var good = total.Good;
                var medium = total.Medium;
                var bad = total.Bad;
                var tips = total.Tips;
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Bad": bad + 1,
                });
            } else {
                var good = 0;
                var medium = 0;
                var bad = 0;
                var tips = 0;
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Bad": bad + 1,
                });
            }
        });
        console.log('badIntruder detected' + value);
    });
    //catch the  motion when the one dollar coin is dropped;
    motion1.watch(function (err, value) {
        firebaseDatabase.ref("raspio").child("compare").child(restaurantName).once("value").then(function (snapshot) {
            var resultTemp = (snapshot.val()) || 'Anonymous';

            if (resultTemp == "Anonymous") {
                totalTips = 0;
                firebaseDatabase.ref("raspio").child(currentUid).child(restaurantName).child(today).once("value").then(function (snapshot) {
                    var total = (snapshot.val());
                    if (total != undefined) {
                        var good = total.Good;
                        var medium = total.Medium;
                        var bad = total.Bad;
                        var tips = total.Tips;
                        firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                            "Tips": tips + 1,
                        });
                        firebaseDatabase.ref("raspio/compare/" + restaurantName).update({
                            "Tips": totalTips + 1,
                        });
                    } else {
                        var good = 0;
                        var medium = 0;
                        var bad = 0;
                        var tips = 0;
                        firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                            "Tips": tips + 1,
                        });
                        firebaseDatabase.ref("raspio/compare/" + restaurantName).update({
                            "Tips": totalTips + 1,
                        });
                    }
                });
            } else {
                totalTips = resultTemp.Tips;
                firebaseDatabase.ref("raspio").child(currentUid).child(restaurantName).child(today).once("value").then(function (snapshot) {
                    var total = (snapshot.val());
                    if (total != undefined) {
                        var good = total.Good;
                        var medium = total.Medium;
                        var bad = total.Bad;
                        var tips = total.Tips;
                        firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                            "Tips": tips + 1,
                        });
                        firebaseDatabase.ref("raspio/compare/" + restaurantName).update({
                            "Tips": totalTips + 1,
                        });
                    } else {
                        var good = 0;
                        var medium = 0;
                        var bad = 0;
                        var tips = 0;
                        firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                            "Tips": tips + 1,
                        });
                        firebaseDatabase.ref("raspio/compare/" + restaurantName).update({
                            "Tips": totalTips + 1,
                        });
                    }
                });
            }
        });
        //there are only two values: 1 and 0;
        //when the value is 1 that means the drop motion is detected otherwise it is ready for dectecting a drop;
        console.log('1 dollar detected' + value);
    });
    //catch the  motion when the two dollars coin is dropped;
    motion2.watch(function (err, value) {
        firebaseDatabase.ref("raspio").child("compare").child(restaurantName).once("value").then(function (snapshot) {
            var resultTemp = (snapshot.val()) || 'Anonymous';

            if (resultTemp == "Anonymous") {
                totalTips = 0;
                firebaseDatabase.ref("raspio").child(currentUid).child(restaurantName).child(today).once("value").then(function (snapshot) {
                    var total = (snapshot.val());
                    if (total != undefined) {
                        var good = total.Good;
                        var medium = total.Medium;
                        var bad = total.Bad;
                        var tips = total.Tips;
                        firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                            "Tips": tips + 2,
                        });
                        firebaseDatabase.ref("raspio/compare/" + restaurantName).update({
                            "Tips": totalTips + 2,
                        });
                    } else {
                        var good = 0;
                        var medium = 0;
                        var bad = 0;
                        var tips = 0;
                        firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                            "Tips": tips + 2,
                        });
                        firebaseDatabase.ref("raspio/compare/" + restaurantName).update({
                            "Tips": totalTips + 2,
                        });
                    }
                });
            } else {
                totalTips = resultTemp.Tips;
                firebaseDatabase.ref("raspio").child(currentUid).child(restaurantName).child(today).once("value").then(function (snapshot) {
                    var total = (snapshot.val());
                    if (total != undefined) {
                        var good = total.Good;
                        var medium = total.Medium;
                        var bad = total.Bad;
                        var tips = total.Tips;
                        firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                            "Tips": tips + 2,
                        });
                        firebaseDatabase.ref("raspio/compare/" + restaurantName).update({
                            "Tips": totalTips + 2,
                        });
                    } else {
                        var good = 0;
                        var medium = 0;
                        var bad = 0;
                        var tips = 0;
                        firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                            "Tips": tips + 2,
                        });
                        firebaseDatabase.ref("raspio/compare/" + restaurantName).update({
                            "Tips": totalTips + 2,
                        });
                    }
                });
            }
        });
        //there are only two values: 1 and 0;
        //when the value is 1 that means the drop motion is detected otherwise it is ready for dectecting a drop;
        console.log('2 dollars detected' + value);
    });


}

//this is the back up function if the touch sensors are broke we can use this text UI for customer to provide feedback;
function updateGMB(good1, medium1, bad1) {
    var today = getDate();
    var good = good1 + 1;
    var medium = medium1 + 1;
    var bad = bad1 + 1;
    rl.question('How do you rate this meal? 1.Good  2.Medium  3.Bad: ', (rate) => {
        console.log("2312313", rate);
        switch (rate) {//not working
            case "1":
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Good": good,
                });
                break;
            case "2":
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Medium": medium,
                });
            case "3":
                firebaseDatabase.ref("raspio/" + currentUid + "/" + restaurantName + "/" + today).update({
                    "Bad": bad,
                });
                break;
        }
    });
}

//everymoth remove the compare node since the competition is monthly
function monthlyClean() {
    var flag = false;
    var todayDate = new Date();
    var day = todayDate.getDate();
    var hour = todayDate.getHours();
    var mins = todayDate.getMinutes();
    var sec = todayDate.getSeconds();
    if (day == 0 && hour == 0 && mins == 0 && sec == 0) {
        flag = true;
    }
    if (flag == true) {
        firebaseDatabase.ref("raspio/compare").remove();
    }

}

//get the current year month and day;
function getDate() {
    var todayDate = new Date();
    var year = todayDate.getFullYear();
    var month = todayDate.getMonth() + 1;
    var day = todayDate.getDate();
    var hour = todayDate.getHours();
    var mins = todayDate.getMinutes();
    var sec = todayDate.getSeconds();
    if (month < 10) {
        month = "0" + month;
    }
    if (day < 10) {
        day = "0" + day;
    }
    if (hour < 10) {
        hour = "0" + hour;
    }
    if (mins < 10) {
        mins = "0" + mins;
    }
    if (sec < 10) {
        sec = "0" + sec;
    }
    //console.log(year + "-" + month + "-" + day + "  " + hour + ":" + mins + ":" + sec);
    var date = year + "-" + month + "-" + day;
    return date;
}









